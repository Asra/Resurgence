// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server.MirDatabase;

#nullable disable

namespace Server.Library.Migrations
{
    [DbContext(typeof(GameDbContext))]
    partial class GameDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("Awake", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Type")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("listAwake")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Awakes");
                });

            modelBuilder.Entity("ExpireInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ExpireInfos");
                });

            modelBuilder.Entity("GameShopItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanBuyCredit")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanBuyGold")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<string>("Class")
                        .HasColumnType("TEXT");

                    b.Property<ushort>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("CreditPrice")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deal")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GIndex")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("GoldPrice")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemIndex")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Stock")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TopItem")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("iStock")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ItemIndex");

                    b.ToTable("GameShopItems");
                });

            modelBuilder.Entity("GuildBuff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActiveTimeRemaining")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GuildInfoGuildIndex")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InfoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GuildInfoGuildIndex");

                    b.HasIndex("InfoId");

                    b.ToTable("GuildBuffs");
                });

            modelBuilder.Entity("GuildBuffInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActivationCost")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Icon")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("LevelRequirement")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<byte>("PointsRequirement")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StatsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimeLimit")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StatsId");

                    b.ToTable("GuildBuffInfos");
                });

            modelBuilder.Entity("GuildMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GuildRankId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasVoted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Online")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GuildRankId");

                    b.ToTable("GuildMembers");
                });

            modelBuilder.Entity("GuildRank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GuildInfoGuildIndex")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<byte>("Options")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GuildInfoGuildIndex");

                    b.ToTable("GuildRanks");
                });

            modelBuilder.Entity("IntelligentCreatureItemFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PetPickupAccessories")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PetPickupAll")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PetPickupArmours")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PetPickupBelts")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PetPickupBoots")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PetPickupGold")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PetPickupHelmets")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PetPickupOthers")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PetPickupWeapons")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("PickupGrade")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("IntelligentCreatureItemFilter");
                });

            modelBuilder.Entity("ItemInfo", b =>
                {
                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<short>("Bind")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanAwakening")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanFastRun")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanMine")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ClassBased")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Durability")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Effect")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("GlobalDropNotify")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Grade")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Image")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LevelBased")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Light")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<bool>("NeedIdentify")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Price")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("RandomStatsId")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("RequiredAmount")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("RequiredClass")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("RequiredGender")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("RequiredType")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Set")
                        .HasColumnType("INTEGER");

                    b.Property<short>("Shape")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowGroupPickup")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Slots")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("StackSize")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("StartItem")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ToolTip")
                        .HasColumnType("TEXT");

                    b.Property<byte>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<short>("Unique")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("Index");

                    b.ToTable("ItemInfos");
                });

            modelBuilder.Entity("ItemRentalInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CharacterInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CharacterInfoId1")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ItemName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ItemReturnDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("RentingPlayerName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CharacterInfoId");

                    b.HasIndex("CharacterInfoId1");

                    b.ToTable("ItemRentalInformations");
                });

            modelBuilder.Entity("RentalInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<short>("BindingFlags")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("OwnerName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("RentalLocked")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("RentalInformations");
                });

            modelBuilder.Entity("SealedInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("NextSealDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SealedInfos");
                });

            modelBuilder.Entity("Server.Library.MirDatabase.GTMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Begin")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Days")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Key")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Leader")
                        .HasColumnType("TEXT");

                    b.Property<string>("Leader2")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Owner")
                        .HasColumnType("TEXT");

                    b.Property<int>("Price")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("GTMaps");
                });

            modelBuilder.Entity("Server.MirDatabase.AccountInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("AdminAccount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BanReason")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Banned")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreationIP")
                        .HasColumnType("TEXT");

                    b.Property<uint>("Credit")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EMailAddress")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpandedStorageExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<uint>("Gold")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasExpandedStorage")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastIP")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequirePasswordChange")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Salt")
                        .HasColumnType("BLOB");

                    b.Property<string>("SecretAnswer")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecretQuestion")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.Property<int>("WrongPasswordCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("AccountInfo");
                });

            modelBuilder.Entity("Server.MirDatabase.AuctionInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AccountInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ConsignmentDate")
                        .HasColumnType("TEXT");

                    b.Property<uint>("CurrentBid")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CurrentBuyerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentBuyerIndex")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Expired")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("ItemType")
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("ItemUniqueID")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Price")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SellerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SellerIndex")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Sold")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AccountInfoId");

                    b.HasIndex("CurrentBuyerId");

                    b.HasIndex("ItemUniqueID");

                    b.HasIndex("SellerId");

                    b.ToTable("Auctions");
                });

            modelBuilder.Entity("Server.MirDatabase.Buff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CharacterInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ExpireTime")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ObjectID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StatsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CharacterInfoId");

                    b.HasIndex("StatsId");

                    b.ToTable("Buffs");
                });

            modelBuilder.Entity("Server.MirDatabase.BuffInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Icon")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Properties")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("StackType")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Visible")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("BuffInfo");
                });

            modelBuilder.Entity("Server.MirDatabase.CharacterInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("AMode")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AccountInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AllowGroup")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AllowObserve")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AllowTrade")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BanReason")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Banned")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BindLocationX")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BindLocationY")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BindMapIndex")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ChatBanExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ChatBanned")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Class")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CollectTime")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("CompletedQuests")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreationIP")
                        .HasColumnType("TEXT");

                    b.Property<bool>("CrossHalfMoon")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentHeroIndex")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentLocationX")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentLocationY")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentMapIndex")
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("CurrentRefineUniqueID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DeleteDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Direction")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<bool>("DoubleSlash")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EquipmentJson")
                        .HasColumnType("TEXT");

                    b.Property<long>("Experience")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("Flags")
                        .HasColumnType("TEXT");

                    b.Property<byte>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GuildIndex")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HP")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Hair")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HalfMoon")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasRentedItem")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("HeroBehaviour")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HeroSpawned")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<string>("InventoryJson")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsMentor")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastIP")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastLogoutDate")
                        .HasColumnType("TEXT");

                    b.Property<ushort>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MP")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Married")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("MarriedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaximumHeroCount")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("MentalState")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("MentalStateLvl")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Mentor")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("MentorDate")
                        .HasColumnType("TEXT");

                    b.Property<long>("MentorExp")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MountId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<bool>("NewDay")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PKPoints")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("PMode")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PearlCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("QuestInventoryJson")
                        .HasColumnType("TEXT");

                    b.Property<string>("RefineJson")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Thrusting")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TradeJson")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountInfoId");

                    b.HasIndex("CurrentRefineUniqueID");

                    b.HasIndex("MountId");

                    b.ToTable("CharacterInfo");

                    b.HasDiscriminator().HasValue("CharacterInfo");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Server.MirDatabase.ConquestArcherInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ConquestInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationX")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationY")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MobIndex")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<uint>("RepairCost")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ConquestInfoId");

                    b.ToTable("ConquestArcherInfo");
                });

            modelBuilder.Entity("Server.MirDatabase.ConquestFlagInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ConquestInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ConquestInfoId1")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationX")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationY")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConquestInfoId");

                    b.HasIndex("ConquestInfoId1");

                    b.ToTable("ConquestFlagInfo");
                });

            modelBuilder.Entity("Server.MirDatabase.ConquestGateInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ConquestInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationX")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationY")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MobIndex")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("RepairCost")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ConquestInfoId");

                    b.ToTable("ConquestGateInfo");
                });

            modelBuilder.Entity("Server.MirDatabase.ConquestGuildArcherInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Alive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ConquestGuildInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ConquestGuildInfoId");

                    b.ToTable("ConquestGuildArcherInfo");
                });

            modelBuilder.Entity("Server.MirDatabase.ConquestGuildGateInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ConquestGuildInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Health")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ConquestGuildInfoId");

                    b.ToTable("ConquestGuildGateInfo");
                });

            modelBuilder.Entity("Server.MirDatabase.ConquestGuildInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AttackerID")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("GoldStorage")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("NPCRate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NeedSave")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Owner")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ConquestGuildInfo");
                });

            modelBuilder.Entity("Server.MirDatabase.ConquestGuildSiegeInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ConquestGuildInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Health")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ConquestGuildInfoId");

                    b.ToTable("ConquestGuildSiegeInfo");
                });

            modelBuilder.Entity("Server.MirDatabase.ConquestGuildWallInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ConquestGuildInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Health")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ConquestGuildInfoId");

                    b.ToTable("ConquestGuildWallInfo");
                });

            modelBuilder.Entity("Server.MirDatabase.ConquestInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ControlPointIndex")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("ExtraMaps")
                        .HasColumnType("TEXT");

                    b.Property<int>("FlagIndex")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Friday")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("FullMap")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Game")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GateIndex")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GuardIndex")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<int>("KingLocationX")
                        .HasColumnType("INTEGER");

                    b.Property<int>("KingLocationY")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("KingSize")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationX")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationY")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MapIndex")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Monday")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("PalaceIndex")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Saturday")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SiegeIndex")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Size")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("StartHour")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Sunday")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Thursday")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Tuesday")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WallIndex")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WarLength")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Wednesday")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ConquestInfo");
                });

            modelBuilder.Entity("Server.MirDatabase.ConquestSiegeInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ConquestInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationX")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationY")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MobIndex")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("RepairCost")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ConquestInfoId");

                    b.ToTable("ConquestSiegeInfo");
                });

            modelBuilder.Entity("Server.MirDatabase.ConquestWallInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ConquestInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationX")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationY")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MobIndex")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("RepairCost")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ConquestInfoId");

                    b.ToTable("ConquestWallInfo");
                });

            modelBuilder.Entity("Server.MirDatabase.DragonInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BodyName")
                        .HasColumnType("TEXT");

                    b.Property<int>("DropAreaBottomX")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DropAreaBottomY")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DropAreaTopX")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DropAreaTopY")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Experience")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("Exps")
                        .HasColumnType("TEXT");

                    b.Property<byte>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationX")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationY")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MapFileName")
                        .HasColumnType("TEXT");

                    b.Property<string>("MonsterName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DragonInfo");
                });

            modelBuilder.Entity("Server.MirDatabase.FriendInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Blocked")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CharacterInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Memo")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CharacterInfoId");

                    b.ToTable("FriendInfo");
                });

            modelBuilder.Entity("Server.MirDatabase.GuildInfo", b =>
                {
                    b.Property<int>("GuildIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("Experience")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FlagColourArgb")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("FlagImage")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("GTBegin")
                        .HasColumnType("TEXT");

                    b.Property<int>("GTIndex")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GTKey")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GTPrice")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("GTRent")
                        .HasColumnType("TEXT");

                    b.Property<uint>("Gold")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastVoteAttempt")
                        .HasColumnType("TEXT");

                    b.Property<byte>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MemberCap")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Membercount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("Notice")
                        .HasColumnType("TEXT");

                    b.Property<byte>("SparePoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Votes")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Voting")
                        .HasColumnType("INTEGER");

                    b.HasKey("GuildIndex");

                    b.ToTable("GuildInfos");
                });

            modelBuilder.Entity("Server.MirDatabase.IntelligentCreatureInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AutoPickupEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AutoPickupRange")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanProduceBlackStone")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Icon")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinimalFullness")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("MousePickupEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MousePickupRange")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("PetType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SemiAutoPickupEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SemiAutoPickupRange")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("IntelligentCreatureInfo");
                });

            modelBuilder.Entity("Server.MirDatabase.MagicInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("BaseCost")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("DelayBase")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("DelayReduction")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Icon")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Level1")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Level2")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Level3")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("LevelCost")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("MPowerBase")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("MPowerBonus")
                        .HasColumnType("INTEGER");

                    b.Property<float>("MultiplierBase")
                        .HasColumnType("REAL");

                    b.Property<float>("MultiplierBonus")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<ushort>("Need1")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Need2")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Need3")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("PowerBase")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("PowerBonus")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Range")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Spell")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("MagicInfo");
                });

            modelBuilder.Entity("Server.MirDatabase.MapInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActiveCoordsJson")
                        .HasColumnType("TEXT");

                    b.Property<ushort>("BigMap")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Fight")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Fire")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FireDamage")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("GT")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("GTIndex")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Light")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Lightning")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LightningDamage")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("MapDarkLight")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("MineIndex")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("MiniMap")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Music")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NeedBridle")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NeedHole")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NoDropMonster")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NoDropPlayer")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NoDrug")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NoEscape")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NoFight")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NoMount")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NoNames")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NoPosition")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NoRandom")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NoRecall")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NoReconnect")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NoReconnectMap")
                        .HasColumnType("TEXT");

                    b.Property<bool>("NoReincarnation")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NoTeleport")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NoThrowItem")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NoTownTeleport")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<ushort>("WeatherParticles")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("MapInfo");
                });

            modelBuilder.Entity("Server.MirDatabase.MineZone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationX")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationY")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MapInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Mine")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Size")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MapInfoId");

                    b.ToTable("MineZones");
                });

            modelBuilder.Entity("Server.MirDatabase.MonsterInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("AI")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("AttackSpeed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AutoRev")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanPush")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanTame")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("CoolEye")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DropPath")
                        .HasColumnType("TEXT");

                    b.Property<byte>("Effect")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Experience")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasDieScript")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasSpawnScript")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Image")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Light")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("MoveSpeed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("StatsId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Undead")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("ViewRange")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StatsId");

                    b.ToTable("MonsterInfo");
                });

            modelBuilder.Entity("Server.MirDatabase.MountInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<short>("MountType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("MountInfo");
                });

            modelBuilder.Entity("Server.MirDatabase.MovementInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConquestIndex")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DestinationX")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DestinationY")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Icon")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MapIndex")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MapInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NeedHole")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NeedMove")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowOnBigMap")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SourceX")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SourceY")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MapInfoId");

                    b.ToTable("MovementInfos");
                });

            modelBuilder.Entity("Server.MirDatabase.NPCInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BigMapIcon")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanTeleportTo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClassRequired")
                        .HasColumnType("TEXT");

                    b.Property<string>("CollectQuestIndexesJson")
                        .HasColumnType("TEXT");

                    b.Property<string>("ColourHex")
                        .HasColumnType("TEXT");

                    b.Property<int>("Conquest")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ConquestVisible")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DayofWeek")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FinishQuestIndexesJson")
                        .HasColumnType("TEXT");

                    b.Property<int>("FlagNeeded")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("HourEnd")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("HourStart")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Image")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationX")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationY")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MapIndex")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MapInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<short>("MaxLev")
                        .HasColumnType("INTEGER");

                    b.Property<short>("MinLev")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("MinuteEnd")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("MinuteStart")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<ushort>("Rate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Sabuk")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowOnBigMap")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TimeVisible")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MapInfoId");

                    b.ToTable("NPCInfo");
                });

            modelBuilder.Entity("Server.MirDatabase.PetInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CharacterInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Experience")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HP")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("MaxPetLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MonsterIndex")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TameTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CharacterInfoId");

                    b.ToTable("PetInfo");
                });

            modelBuilder.Entity("Server.MirDatabase.QuestFlagTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("QuestFlagTask");
                });

            modelBuilder.Entity("Server.MirDatabase.QuestFlagTaskProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("InfoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("QuestProgressInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("State")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("InfoId");

                    b.HasIndex("QuestProgressInfoId");

                    b.ToTable("QuestFlagTaskProgress");
                });

            modelBuilder.Entity("Server.MirDatabase.QuestInfo", b =>
                {
                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FlagMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("GotoMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("Group")
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("KillMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<byte>("RequiredClass")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RequiredMaxLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RequiredMinLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RequiredQuest")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimeLimitInSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Index");

                    b.ToTable("QuestInfo");
                });

            modelBuilder.Entity("Server.MirDatabase.QuestItemTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ItemIndex")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ItemIndex");

                    b.ToTable("QuestItemTask");
                });

            modelBuilder.Entity("Server.MirDatabase.QuestItemTaskProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("InfoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("QuestProgressInfoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("InfoId");

                    b.HasIndex("QuestProgressInfoId");

                    b.ToTable("QuestItemTaskProgress");
                });

            modelBuilder.Entity("Server.MirDatabase.QuestKillTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MonsterId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MonsterId");

                    b.ToTable("QuestKillTask");
                });

            modelBuilder.Entity("Server.MirDatabase.QuestKillTaskProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("InfoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MonsterID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("QuestProgressInfoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("InfoId");

                    b.HasIndex("QuestProgressInfoId");

                    b.ToTable("QuestKillTaskProgress");
                });

            modelBuilder.Entity("Server.MirDatabase.QuestProgressInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CharacterInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("InfoIndex")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("TaskList")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CharacterInfoId");

                    b.HasIndex("InfoIndex");

                    b.ToTable("QuestProgressInfo");
                });

            modelBuilder.Entity("Server.MirDatabase.RecipeInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Chance")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Gold")
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("ItemUniqueID")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("RequiredClass")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("RequiredFlag")
                        .HasColumnType("TEXT");

                    b.Property<byte?>("RequiredGender")
                        .HasColumnType("INTEGER");

                    b.Property<ushort?>("RequiredLevel")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("RequiredQuest")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ItemUniqueID");

                    b.ToTable("RecipeInfo");
                });

            modelBuilder.Entity("Server.MirDatabase.RespawnInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Delay")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Direction")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationX")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationY")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MapInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MonsterIndex")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("RandomDelay")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RespawnIndex")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("RespawnTicks")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoutePath")
                        .HasColumnType("TEXT");

                    b.Property<bool>("SaveRespawnTime")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Spread")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MapInfoId");

                    b.ToTable("RespawnInfo");
                });

            modelBuilder.Entity("Server.MirDatabase.SafeZoneInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationX")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationY")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MapInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Size")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("StartPoint")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MapInfoId");

                    b.ToTable("SafeZoneInfos");
                });

            modelBuilder.Entity("Server.MirDatabase.UserIntelligentCreature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("BlackstoneTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CharacterInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Expire")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FilterId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Fullness")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("InfoId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MaintainFoodTime")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("PetType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SlotIndex")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("petMode")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CharacterInfoId");

                    b.HasIndex("FilterId");

                    b.HasIndex("InfoId");

                    b.ToTable("UserIntelligentCreature");
                });

            modelBuilder.Entity("Server.MirDatabase.UserMagic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("CastTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CharacterInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Experience")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("InfoId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsTempSpell")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Key")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Spell")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CharacterInfoId");

                    b.HasIndex("InfoId");

                    b.ToTable("UserMagic");
                });

            modelBuilder.Entity("Server.MirEnvir.MailInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanReply")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Collected")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateOpened")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("TEXT");

                    b.Property<uint>("Gold")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Locked")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("MailID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<int>("RecipientIndex")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RecipientInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Sender")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RecipientInfoId");

                    b.ToTable("MailInfo");
                });

            modelBuilder.Entity("Stats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Accuracy")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Agility")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AttackBonus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AttackSpeed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AttackSpeedRatePercent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BagWeight")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CraftRatePercent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CriticalDamage")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CriticalRate")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DamageReductionPercent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EnergyShieldHPGain")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EnergyShieldPercent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExpRatePercent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FishRatePercent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Freezing")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GemRatePercent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GoldDropRatePercent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HP")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HPDrainRatePercent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HPRatePercent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HandWeight")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HealthRecovery")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Hero")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Holy")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemDropRatePercent")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ItemInfoIndex")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LoverExpRatePercent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Luck")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MP")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MPRatePercent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MagicResist")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ManaPenaltyPercent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxAC")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxACRatePercent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxDC")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxDCRatePercent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxMAC")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxMACRatePercent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxMC")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxMCRatePercent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxSC")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxSCRatePercent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MentorDamageRatePercent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MentorExpRatePercent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinAC")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinDC")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinMAC")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinMC")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinSC")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MineRatePercent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PoisonAttack")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PoisonRecovery")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PoisonResist")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Reflect")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SkillGainMultiplier")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SpellRecovery")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Strong")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeleportManaPenaltyPercent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Unknown")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WearWeight")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ItemInfoIndex")
                        .IsUnique();

                    b.ToTable("Stats");
                });

            modelBuilder.Entity("UserItem", b =>
                {
                    b.Property<ulong>("UniqueID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AddedStatsId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AwakeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BuybackExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<ushort>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("CurrentDura")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Cursed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DuraChanged")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ExpireInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("GMMade")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("GemCount")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Identified")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsShopItem")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemIndex")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MailInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("MaxDura")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MountInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("ParentItemID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RecipeInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RecipeInfoId1")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("RefineAdded")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RefineSuccessChance")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("RefinedValue")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RentalInformationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SealedInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SlotsJson")
                        .HasColumnType("TEXT");

                    b.Property<int>("SoulBoundId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WeddingRing")
                        .HasColumnType("INTEGER");

                    b.HasKey("UniqueID");

                    b.HasIndex("AddedStatsId");

                    b.HasIndex("AwakeId");

                    b.HasIndex("ExpireInfoId");

                    b.HasIndex("ItemIndex");

                    b.HasIndex("MailInfoId");

                    b.HasIndex("MountInfoId");

                    b.HasIndex("ParentItemID");

                    b.HasIndex("RecipeInfoId");

                    b.HasIndex("RecipeInfoId1");

                    b.HasIndex("RentalInformationId");

                    b.HasIndex("SealedInfoId");

                    b.ToTable("UserItems");
                });

            modelBuilder.Entity("Server.MirDatabase.HeroInfo", b =>
                {
                    b.HasBaseType("Server.MirDatabase.CharacterInfo");

                    b.Property<byte>("AutoHPPercent")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("AutoMPPercent")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AutoPot")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Grade")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HPItemIndex")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MPItemIndex")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("SealCount")
                        .HasColumnType("INTEGER");

                    b.ToTable("CharacterInfo");

                    b.HasDiscriminator().HasValue("HeroInfo");
                });

            modelBuilder.Entity("GameShopItem", b =>
                {
                    b.HasOne("ItemInfo", "Info")
                        .WithMany()
                        .HasForeignKey("ItemIndex")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Info");
                });

            modelBuilder.Entity("GuildBuff", b =>
                {
                    b.HasOne("Server.MirDatabase.GuildInfo", null)
                        .WithMany("BuffList")
                        .HasForeignKey("GuildInfoGuildIndex");

                    b.HasOne("GuildBuffInfo", "Info")
                        .WithMany()
                        .HasForeignKey("InfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Info");
                });

            modelBuilder.Entity("GuildBuffInfo", b =>
                {
                    b.HasOne("Stats", "Stats")
                        .WithMany()
                        .HasForeignKey("StatsId");

                    b.Navigation("Stats");
                });

            modelBuilder.Entity("GuildMember", b =>
                {
                    b.HasOne("GuildRank", null)
                        .WithMany("Members")
                        .HasForeignKey("GuildRankId");
                });

            modelBuilder.Entity("GuildRank", b =>
                {
                    b.HasOne("Server.MirDatabase.GuildInfo", null)
                        .WithMany("Ranks")
                        .HasForeignKey("GuildInfoGuildIndex");
                });

            modelBuilder.Entity("ItemRentalInformation", b =>
                {
                    b.HasOne("Server.MirDatabase.CharacterInfo", null)
                        .WithMany("RentedItems")
                        .HasForeignKey("CharacterInfoId");

                    b.HasOne("Server.MirDatabase.CharacterInfo", null)
                        .WithMany("RentedItemsToRemove")
                        .HasForeignKey("CharacterInfoId1");
                });

            modelBuilder.Entity("Server.MirDatabase.AuctionInfo", b =>
                {
                    b.HasOne("Server.MirDatabase.AccountInfo", null)
                        .WithMany("Auctions")
                        .HasForeignKey("AccountInfoId");

                    b.HasOne("Server.MirDatabase.CharacterInfo", "CurrentBuyerInfo")
                        .WithMany()
                        .HasForeignKey("CurrentBuyerId");

                    b.HasOne("UserItem", "Item")
                        .WithMany()
                        .HasForeignKey("ItemUniqueID");

                    b.HasOne("Server.MirDatabase.CharacterInfo", "SellerInfo")
                        .WithMany()
                        .HasForeignKey("SellerId");

                    b.Navigation("CurrentBuyerInfo");

                    b.Navigation("Item");

                    b.Navigation("SellerInfo");
                });

            modelBuilder.Entity("Server.MirDatabase.Buff", b =>
                {
                    b.HasOne("Server.MirDatabase.CharacterInfo", null)
                        .WithMany("Buffs")
                        .HasForeignKey("CharacterInfoId");

                    b.HasOne("Stats", "Stats")
                        .WithMany()
                        .HasForeignKey("StatsId");

                    b.Navigation("Stats");
                });

            modelBuilder.Entity("Server.MirDatabase.CharacterInfo", b =>
                {
                    b.HasOne("Server.MirDatabase.AccountInfo", "AccountInfo")
                        .WithMany("Characters")
                        .HasForeignKey("AccountInfoId");

                    b.HasOne("UserItem", "CurrentRefine")
                        .WithMany()
                        .HasForeignKey("CurrentRefineUniqueID");

                    b.HasOne("Server.MirDatabase.MountInfo", "Mount")
                        .WithMany()
                        .HasForeignKey("MountId");

                    b.Navigation("AccountInfo");

                    b.Navigation("CurrentRefine");

                    b.Navigation("Mount");
                });

            modelBuilder.Entity("Server.MirDatabase.ConquestArcherInfo", b =>
                {
                    b.HasOne("Server.MirDatabase.ConquestInfo", null)
                        .WithMany("ConquestGuards")
                        .HasForeignKey("ConquestInfoId");
                });

            modelBuilder.Entity("Server.MirDatabase.ConquestFlagInfo", b =>
                {
                    b.HasOne("Server.MirDatabase.ConquestInfo", null)
                        .WithMany("ConquestFlags")
                        .HasForeignKey("ConquestInfoId");

                    b.HasOne("Server.MirDatabase.ConquestInfo", null)
                        .WithMany("ControlPoints")
                        .HasForeignKey("ConquestInfoId1");
                });

            modelBuilder.Entity("Server.MirDatabase.ConquestGateInfo", b =>
                {
                    b.HasOne("Server.MirDatabase.ConquestInfo", null)
                        .WithMany("ConquestGates")
                        .HasForeignKey("ConquestInfoId");
                });

            modelBuilder.Entity("Server.MirDatabase.ConquestGuildArcherInfo", b =>
                {
                    b.HasOne("Server.MirDatabase.ConquestGuildInfo", null)
                        .WithMany("ArcherList")
                        .HasForeignKey("ConquestGuildInfoId");
                });

            modelBuilder.Entity("Server.MirDatabase.ConquestGuildGateInfo", b =>
                {
                    b.HasOne("Server.MirDatabase.ConquestGuildInfo", null)
                        .WithMany("GateList")
                        .HasForeignKey("ConquestGuildInfoId");
                });

            modelBuilder.Entity("Server.MirDatabase.ConquestGuildSiegeInfo", b =>
                {
                    b.HasOne("Server.MirDatabase.ConquestGuildInfo", null)
                        .WithMany("SiegeList")
                        .HasForeignKey("ConquestGuildInfoId");
                });

            modelBuilder.Entity("Server.MirDatabase.ConquestGuildWallInfo", b =>
                {
                    b.HasOne("Server.MirDatabase.ConquestGuildInfo", null)
                        .WithMany("WallList")
                        .HasForeignKey("ConquestGuildInfoId");
                });

            modelBuilder.Entity("Server.MirDatabase.ConquestSiegeInfo", b =>
                {
                    b.HasOne("Server.MirDatabase.ConquestInfo", null)
                        .WithMany("ConquestSieges")
                        .HasForeignKey("ConquestInfoId");
                });

            modelBuilder.Entity("Server.MirDatabase.ConquestWallInfo", b =>
                {
                    b.HasOne("Server.MirDatabase.ConquestInfo", null)
                        .WithMany("ConquestWalls")
                        .HasForeignKey("ConquestInfoId");
                });

            modelBuilder.Entity("Server.MirDatabase.FriendInfo", b =>
                {
                    b.HasOne("Server.MirDatabase.CharacterInfo", null)
                        .WithMany("Friends")
                        .HasForeignKey("CharacterInfoId");
                });

            modelBuilder.Entity("Server.MirDatabase.MineZone", b =>
                {
                    b.HasOne("Server.MirDatabase.MapInfo", null)
                        .WithMany("MineZones")
                        .HasForeignKey("MapInfoId");
                });

            modelBuilder.Entity("Server.MirDatabase.MonsterInfo", b =>
                {
                    b.HasOne("Stats", "Stats")
                        .WithMany()
                        .HasForeignKey("StatsId");

                    b.Navigation("Stats");
                });

            modelBuilder.Entity("Server.MirDatabase.MovementInfo", b =>
                {
                    b.HasOne("Server.MirDatabase.MapInfo", null)
                        .WithMany("Movements")
                        .HasForeignKey("MapInfoId");
                });

            modelBuilder.Entity("Server.MirDatabase.NPCInfo", b =>
                {
                    b.HasOne("Server.MirDatabase.MapInfo", null)
                        .WithMany("NPCs")
                        .HasForeignKey("MapInfoId");
                });

            modelBuilder.Entity("Server.MirDatabase.PetInfo", b =>
                {
                    b.HasOne("Server.MirDatabase.CharacterInfo", null)
                        .WithMany("Pets")
                        .HasForeignKey("CharacterInfoId");
                });

            modelBuilder.Entity("Server.MirDatabase.QuestFlagTaskProgress", b =>
                {
                    b.HasOne("Server.MirDatabase.QuestFlagTask", "Info")
                        .WithMany()
                        .HasForeignKey("InfoId");

                    b.HasOne("Server.MirDatabase.QuestProgressInfo", null)
                        .WithMany("FlagTaskSet")
                        .HasForeignKey("QuestProgressInfoId");

                    b.Navigation("Info");
                });

            modelBuilder.Entity("Server.MirDatabase.QuestItemTask", b =>
                {
                    b.HasOne("ItemInfo", "Item")
                        .WithMany()
                        .HasForeignKey("ItemIndex");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Server.MirDatabase.QuestItemTaskProgress", b =>
                {
                    b.HasOne("Server.MirDatabase.QuestItemTask", "Info")
                        .WithMany()
                        .HasForeignKey("InfoId");

                    b.HasOne("Server.MirDatabase.QuestProgressInfo", null)
                        .WithMany("ItemTaskCount")
                        .HasForeignKey("QuestProgressInfoId");

                    b.Navigation("Info");
                });

            modelBuilder.Entity("Server.MirDatabase.QuestKillTask", b =>
                {
                    b.HasOne("Server.MirDatabase.MonsterInfo", "Monster")
                        .WithMany()
                        .HasForeignKey("MonsterId");

                    b.Navigation("Monster");
                });

            modelBuilder.Entity("Server.MirDatabase.QuestKillTaskProgress", b =>
                {
                    b.HasOne("Server.MirDatabase.QuestKillTask", "Info")
                        .WithMany()
                        .HasForeignKey("InfoId");

                    b.HasOne("Server.MirDatabase.QuestProgressInfo", null)
                        .WithMany("KillTaskCount")
                        .HasForeignKey("QuestProgressInfoId");

                    b.Navigation("Info");
                });

            modelBuilder.Entity("Server.MirDatabase.QuestProgressInfo", b =>
                {
                    b.HasOne("Server.MirDatabase.CharacterInfo", null)
                        .WithMany("CurrentQuests")
                        .HasForeignKey("CharacterInfoId");

                    b.HasOne("Server.MirDatabase.QuestInfo", "Info")
                        .WithMany()
                        .HasForeignKey("InfoIndex");

                    b.Navigation("Info");
                });

            modelBuilder.Entity("Server.MirDatabase.RecipeInfo", b =>
                {
                    b.HasOne("UserItem", "Item")
                        .WithMany()
                        .HasForeignKey("ItemUniqueID");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Server.MirDatabase.RespawnInfo", b =>
                {
                    b.HasOne("Server.MirDatabase.MapInfo", "Map")
                        .WithMany("Respawns")
                        .HasForeignKey("MapInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");
                });

            modelBuilder.Entity("Server.MirDatabase.SafeZoneInfo", b =>
                {
                    b.HasOne("Server.MirDatabase.MapInfo", "Info")
                        .WithMany("SafeZones")
                        .HasForeignKey("MapInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Info");
                });

            modelBuilder.Entity("Server.MirDatabase.UserIntelligentCreature", b =>
                {
                    b.HasOne("Server.MirDatabase.CharacterInfo", null)
                        .WithMany("IntelligentCreatures")
                        .HasForeignKey("CharacterInfoId");

                    b.HasOne("IntelligentCreatureItemFilter", "Filter")
                        .WithMany()
                        .HasForeignKey("FilterId");

                    b.HasOne("Server.MirDatabase.IntelligentCreatureInfo", "Info")
                        .WithMany()
                        .HasForeignKey("InfoId");

                    b.Navigation("Filter");

                    b.Navigation("Info");
                });

            modelBuilder.Entity("Server.MirDatabase.UserMagic", b =>
                {
                    b.HasOne("Server.MirDatabase.CharacterInfo", null)
                        .WithMany("Magics")
                        .HasForeignKey("CharacterInfoId");

                    b.HasOne("Server.MirDatabase.MagicInfo", "Info")
                        .WithMany()
                        .HasForeignKey("InfoId");

                    b.Navigation("Info");
                });

            modelBuilder.Entity("Server.MirEnvir.MailInfo", b =>
                {
                    b.HasOne("Server.MirDatabase.CharacterInfo", "RecipientInfo")
                        .WithMany("Mail")
                        .HasForeignKey("RecipientInfoId");

                    b.Navigation("RecipientInfo");
                });

            modelBuilder.Entity("Stats", b =>
                {
                    b.HasOne("ItemInfo", null)
                        .WithOne("Stats")
                        .HasForeignKey("Stats", "ItemInfoIndex");
                });

            modelBuilder.Entity("UserItem", b =>
                {
                    b.HasOne("Stats", "AddedStats")
                        .WithMany()
                        .HasForeignKey("AddedStatsId");

                    b.HasOne("Awake", "Awake")
                        .WithMany()
                        .HasForeignKey("AwakeId");

                    b.HasOne("ExpireInfo", "ExpireInfo")
                        .WithMany()
                        .HasForeignKey("ExpireInfoId");

                    b.HasOne("ItemInfo", "Info")
                        .WithMany()
                        .HasForeignKey("ItemIndex")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.MirEnvir.MailInfo", null)
                        .WithMany("Items")
                        .HasForeignKey("MailInfoId");

                    b.HasOne("Server.MirDatabase.MountInfo", null)
                        .WithMany("Slots")
                        .HasForeignKey("MountInfoId");

                    b.HasOne("UserItem", null)
                        .WithMany("Slots")
                        .HasForeignKey("ParentItemID");

                    b.HasOne("Server.MirDatabase.RecipeInfo", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeInfoId");

                    b.HasOne("Server.MirDatabase.RecipeInfo", null)
                        .WithMany("Tools")
                        .HasForeignKey("RecipeInfoId1");

                    b.HasOne("RentalInformation", "RentalInformation")
                        .WithMany()
                        .HasForeignKey("RentalInformationId");

                    b.HasOne("SealedInfo", "SealedInfo")
                        .WithMany()
                        .HasForeignKey("SealedInfoId");

                    b.Navigation("AddedStats");

                    b.Navigation("Awake");

                    b.Navigation("ExpireInfo");

                    b.Navigation("Info");

                    b.Navigation("RentalInformation");

                    b.Navigation("SealedInfo");
                });

            modelBuilder.Entity("GuildRank", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("ItemInfo", b =>
                {
                    b.Navigation("Stats");
                });

            modelBuilder.Entity("Server.MirDatabase.AccountInfo", b =>
                {
                    b.Navigation("Auctions");

                    b.Navigation("Characters");
                });

            modelBuilder.Entity("Server.MirDatabase.CharacterInfo", b =>
                {
                    b.Navigation("Buffs");

                    b.Navigation("CurrentQuests");

                    b.Navigation("Friends");

                    b.Navigation("IntelligentCreatures");

                    b.Navigation("Magics");

                    b.Navigation("Mail");

                    b.Navigation("Pets");

                    b.Navigation("RentedItems");

                    b.Navigation("RentedItemsToRemove");
                });

            modelBuilder.Entity("Server.MirDatabase.ConquestGuildInfo", b =>
                {
                    b.Navigation("ArcherList");

                    b.Navigation("GateList");

                    b.Navigation("SiegeList");

                    b.Navigation("WallList");
                });

            modelBuilder.Entity("Server.MirDatabase.ConquestInfo", b =>
                {
                    b.Navigation("ConquestFlags");

                    b.Navigation("ConquestGates");

                    b.Navigation("ConquestGuards");

                    b.Navigation("ConquestSieges");

                    b.Navigation("ConquestWalls");

                    b.Navigation("ControlPoints");
                });

            modelBuilder.Entity("Server.MirDatabase.GuildInfo", b =>
                {
                    b.Navigation("BuffList");

                    b.Navigation("Ranks");
                });

            modelBuilder.Entity("Server.MirDatabase.MapInfo", b =>
                {
                    b.Navigation("MineZones");

                    b.Navigation("Movements");

                    b.Navigation("NPCs");

                    b.Navigation("Respawns");

                    b.Navigation("SafeZones");
                });

            modelBuilder.Entity("Server.MirDatabase.MountInfo", b =>
                {
                    b.Navigation("Slots");
                });

            modelBuilder.Entity("Server.MirDatabase.QuestProgressInfo", b =>
                {
                    b.Navigation("FlagTaskSet");

                    b.Navigation("ItemTaskCount");

                    b.Navigation("KillTaskCount");
                });

            modelBuilder.Entity("Server.MirDatabase.RecipeInfo", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("Tools");
                });

            modelBuilder.Entity("Server.MirEnvir.MailInfo", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("UserItem", b =>
                {
                    b.Navigation("Slots");
                });
#pragma warning restore 612, 618
        }
    }
}
