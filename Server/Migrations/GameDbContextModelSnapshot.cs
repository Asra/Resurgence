// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server.MirDatabase;

#nullable disable

namespace Server.Library.Migrations
{
    [DbContext(typeof(GameDbContext))]
    partial class GameDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("Server.MirDatabase.MapInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActiveCoordsJson")
                        .HasColumnType("TEXT");

                    b.Property<ushort>("BigMap")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Fight")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Fire")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FireDamage")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("GT")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("GTIndex")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Light")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Lightning")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LightningDamage")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("MapDarkLight")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("MineIndex")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("MiniMap")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Music")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NeedBridle")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NeedHole")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NoDropMonster")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NoDropPlayer")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NoDrug")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NoEscape")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NoFight")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NoMount")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NoNames")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NoPosition")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NoRandom")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NoRecall")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NoReconnect")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NoReconnectMap")
                        .HasColumnType("TEXT");

                    b.Property<bool>("NoReincarnation")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NoTeleport")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NoThrowItem")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NoTownTeleport")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<ushort>("WeatherParticles")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("MapInfo");
                });

            modelBuilder.Entity("Server.MirDatabase.MineZone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationX")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationY")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MapInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Mine")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Size")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MapInfoId");

                    b.ToTable("MineZone");
                });

            modelBuilder.Entity("Server.MirDatabase.MovementInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConquestIndex")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DestinationX")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DestinationY")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Icon")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MapIndex")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MapInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NeedHole")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NeedMove")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowOnBigMap")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SourceX")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SourceY")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MapInfoId");

                    b.ToTable("MovementInfos");
                });

            modelBuilder.Entity("Server.MirDatabase.NPCInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BigMapIcon")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanTeleportTo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClassRequired")
                        .HasColumnType("TEXT");

                    b.Property<string>("CollectQuestIndexesJson")
                        .HasColumnType("TEXT");

                    b.Property<string>("ColourHex")
                        .HasColumnType("TEXT");

                    b.Property<int>("Conquest")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ConquestVisible")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DayofWeek")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FinishQuestIndexesJson")
                        .HasColumnType("TEXT");

                    b.Property<int>("FlagNeeded")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("HourEnd")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("HourStart")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Image")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationX")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationY")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MapIndex")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MapInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<short>("MaxLev")
                        .HasColumnType("INTEGER");

                    b.Property<short>("MinLev")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("MinuteEnd")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("MinuteStart")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<ushort>("Rate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Sabuk")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowOnBigMap")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TimeVisible")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MapInfoId");

                    b.ToTable("NPCInfos");
                });

            modelBuilder.Entity("Server.MirDatabase.RespawnInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Delay")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Direction")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationX")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationY")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MapInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MonsterIndex")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("RandomDelay")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RespawnIndex")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("RespawnTicks")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoutePath")
                        .HasColumnType("TEXT");

                    b.Property<bool>("SaveRespawnTime")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Spread")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MapInfoId");

                    b.ToTable("RespawnInfo");
                });

            modelBuilder.Entity("Server.MirDatabase.SafeZoneInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationX")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationY")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MapInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Size")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("StartPoint")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MapInfoId");

                    b.ToTable("SafeZoneInfos");
                });

            modelBuilder.Entity("Server.MirDatabase.MineZone", b =>
                {
                    b.HasOne("Server.MirDatabase.MapInfo", null)
                        .WithMany("MineZones")
                        .HasForeignKey("MapInfoId");
                });

            modelBuilder.Entity("Server.MirDatabase.MovementInfo", b =>
                {
                    b.HasOne("Server.MirDatabase.MapInfo", null)
                        .WithMany("Movements")
                        .HasForeignKey("MapInfoId");
                });

            modelBuilder.Entity("Server.MirDatabase.NPCInfo", b =>
                {
                    b.HasOne("Server.MirDatabase.MapInfo", null)
                        .WithMany("NPCs")
                        .HasForeignKey("MapInfoId");
                });

            modelBuilder.Entity("Server.MirDatabase.RespawnInfo", b =>
                {
                    b.HasOne("Server.MirDatabase.MapInfo", "Map")
                        .WithMany("Respawns")
                        .HasForeignKey("MapInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");
                });

            modelBuilder.Entity("Server.MirDatabase.SafeZoneInfo", b =>
                {
                    b.HasOne("Server.MirDatabase.MapInfo", "Info")
                        .WithMany("SafeZones")
                        .HasForeignKey("MapInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Info");
                });

            modelBuilder.Entity("Server.MirDatabase.MapInfo", b =>
                {
                    b.Navigation("MineZones");

                    b.Navigation("Movements");

                    b.Navigation("NPCs");

                    b.Navigation("Respawns");

                    b.Navigation("SafeZones");
                });
#pragma warning restore 612, 618
        }
    }
}
